name: Example with handling Json
on:
  push:
    branches:
      - main

jobs:
    prep-json:
        outputs:
            ddState: ${{ steps.parse_json.outputs.ddState }}
        runs-on: ubuntu-latest
        steps:
            - name: Parse JSON input
              id: parse_json
              run: |
                json_result='{"880987":{"name":"Optiq - Search Request Latency Increased by more than {{threshold}}% in Last 15 Minutes","id":880987,"state":{"groups":{"*":{"name":"*","status":"OK","last_triggered_ts":1749522427,"last_notified_ts":1740736267,"last_nodata_ts":null,"last_resolved_ts":1749523027}}},"matching_downtimes":[{"id":173654859,"active":true,"monitor_id":880987,"start":1740736185,"end":null,"scope":["*"],"groups":["None"]}]}}'
                monitor_ids=(880987 872689 872632)

                # Export all monitor to a state object
                monitors_state=""
                for monitor_id in "${monitor_ids[@]}"; do
                    echo "monitor_id: $monitor_id"
                    state_object=$(echo "$json_result" | jq -c --arg monitor_id "$monitor_id" '.[$monitor_id] | {id: .id, name: .name, state: .state}')
                    monitors_state="${monitors_state}|${state_object}"
                done
                monitors_state=${monitors_state:1}  # Remove leading '|'
                
                echo "output:"
                echo $monitors_state
                echo "ddState=[${monitors_state}]" >> $GITHUB_OUTPUT

    print-state:
        needs: prep-json
        runs-on: ubuntu-latest
        steps:
            - name: Print state
              run: |
                echo "foo"
                monitor_states='${{needs.prep-json.outputs.ddState}}'
                echo "Input:"
                echo $monitor_states
                echo "Parsing..."
                # Print the type of monitor_states
                echo "Type information for monitor_states:"
                echo "Raw value: $monitor_states"
                declare -p monitor_states 2>/dev/null || echo "Not a declared variable - likely a string"
                echo "Is it an array? ${monitor_states[@]}"
                echo "Length if array: ${#monitor_states[@]}"
                # Remove the outer brackets and split by pipe character
                monitor_states="${monitor_states#[}"  # Remove leading '['
                monitor_states="${monitor_states%]}"  # Remove trailing ']'
                echo "Removed brackets:"
                echo "$monitor_states"

                # Split by pipe and process each monitor state
                IFS='|' read -ra monitor_array <<< "$monitor_states"
                echo "Number of monitors: ${#monitor_array[@]}"
                for monitor in "${monitor_array[@]}"; do
                  echo "---"
                  echo "Monitor data: $monitor"
                  status=$(echo $monitor | tr "*" "f" | jq .state.groups.f.status)
                  name=$(echo "$monitor" | jq -r '.name')
                  id=$(echo "$monitor" | jq -r '.id')
                  echo "Name: $name"
                  echo "ID: $id"
                  echo "Status: $status"
                done